# stages:
#   - build
#   - test
#   - deploy

# variables:
#   DATABASE_URL: "postgresql://your-database-connection-url"
#   AWS_ACCESS_KEY_ID: "your-aws-access-key"
#   AWS_SECRET_ACCESS_KEY: "your-aws-secret-access-key"
#   AWS_DEFAULT_REGION: "your-aws-region"

# before_script:
#   - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY

# build:
#   stage: build
#   script:
#     - docker build -t $CI_REGISTRY_IMAGE:latest .
#     - docker push $CI_REGISTRY_IMAGE:latest

# test:
#   stage: test
#   script:
#     - docker run --rm $CI_REGISTRY_IMAGE:latest python manage.py test

# deploy:
#   stage: deploy
#   script:
#     - apt-get update -qq && apt-get install -y -qq python3-pip python3-dev libpq-dev
#     - pip3 install awscli
#     - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
#     - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
#     - aws configure set default.region $AWS_DEFAULT_REGION
#     - aws eks --region $AWS_DEFAULT_REGION update-kubeconfig --name your-eks-cluster-name
#     - kubectl apply -f your-kubernetes-deployment.yaml





















# stages:
#   - build
#   - test
#   - release
#   - deploy

# build-job:
#   tags:
#     - vm-shell
#   stage: build
#   script:
#     - echo "creating virtual environment for the project..."
#     - virtualenv $(pwd)/venv
#     - source $(pwd)/venv/bin/activate
#     - echo "Installing requirements..."
#     - pip install -r requirements.txt
#     - deactivate
#   artifacts:
#     paths:
#       - $(pwd)/venv

# test-job:
#   tags:
#     - vm-shell
#   stage: test
#   script:
#     - echo "Activating virtual environment..."
#     - source $(pwd)/venv/bin/activate
#     - echo "Running unit tests..."
#     - python manage.py test budget
#     - echo "Checking the server..."
#     - python manage.py runserver &
#     - sleep 10
#     - curl -sSf http://localhost:8000 > /dev/null && echo "Server is Up"
#     - sudo pkill python
#     - deactivate
#     - echo "All tests successfully passed."

# variables:
#   CONTAINER_IMAGE: $CI_REGISTRY_IMAGE:$CI_PIPELINE_IID

# release-job:
#   tags:
#     - vm-shell
#   stage: release
#   before_script:
#     - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
#   script:
#     - docker build -t $CONTAINER_IMAGE .
#     - docker push $CONTAINER_IMAGE
#   after_script:
#     - docker logout

# # Deploy petclinic
# deploy-job:
#   tags:
#     - vm-shell
#   stage: deploy
#   before_script:
#     - chmod 400 $SSH_KEY
#   script:
#     - ssh -o StrictHostKeyChecking=no -i $SSH_KEY proxmox@192.168.0.137 "
#         docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY &&
#         docker run -d -p 5000:8000 $CONTAINER_IMAGE"
